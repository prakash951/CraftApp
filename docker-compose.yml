version: '3.4'
volumes:
  keycloak_data:
      driver: local
  user_data:
      driver: local
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
  
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2023-03-13T19-46-17Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minioadmin
    MINIO_ROOT_PASSWORD: minioadmin
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  kpostgres:
      image: postgres:latest
      volumes:
        - keycloak_data:/var/lib/postgresql/data
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password
      ports:
        - '9432:5432'
  upostgres:
      image: postgres:latest
      container_name: app_postgres
      volumes:
        - user_data:/var/lib/postgresql/data1
      environment:
        POSTGRES_DB: uber
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      ports:
        - '8432:5432'
  keycloak:
      image: keycloak/keycloak
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      ports:
        - '8080:8080'
        - '9990:9990'
      depends_on:
        - kpostgres
      command: 'start-dev'
      
  craft:
      build:
         dockerfile: ./Dockerfile
      environment:
        DB_SCHEMA: public
        POSTGRES_DB: uber
        DB_URL: jdbc:postgresql://app_postgres:5432/uber?currentSchema=public
        DB_USER: postgres
        DB_PASSWORD: postgres
        JAEGAR_URL: http://jaeger:14268/api/traces
        JAEGAR_HOST: jaeger
      depends_on:
        - upostgres
        - jaeger
      ports:
        - "12345-12346:12345"
      deploy:
        replicas: 2
        endpoint_mode: vip
        mode: replicated
        
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
      - "14268:14268"
    environment:
      - LOG_LEVEL=debug
      
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2